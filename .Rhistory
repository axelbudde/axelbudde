} else {
rv$intersect <- NULL
}
})
output$selectplot <- renderPlot({
plot(qk_mp, col="gray")
if(!is.null(rv$intersect)) {
plot(rv$intersect, pch=19, col="black", add=TRUE)
}
plot(st_union(rv$selectgrid), add=TRUE)
})
output$quakestat <- renderPlot({
plot(
stats::density(qk_sf$mag), col="gray30", ylim=c(0,1.2),
main = NA
)
if(!is.null(rv$intersect) && nrow(rv$intersect) > 0) {
lines(stats::density(rv$intersect$mag), col="red", lwd=2)
}
})
}
shinyApp(ui, server)
library(shiny)
library(rworldmap)
install.packages("rworldmap")
library(shiny)
library(rworldmap)
library(ggplot2)
library(leaflet)
ui <-  shinyUI(fluidPage(
fluidRow(h1("Events in the World", align = "center")),
fluidRow(
column(2,
selectInput("var", "Choose the Type Event:",
choices=c("Event One" = "EVENTONE",
"Event Two" = "EVENTTWO",
"Event Three" = "EVENTTHREE"))
),
column(10,
tabsetPanel(
tabPanel("Map View", leafletOutput("TheMap", width = "100%")
)
) #end tabset panel
)
)
))
server <- shinyServer(function(input, output) {
datamap <- read.csv("E:/test.csv",
stringsAsFactors=FALSE, header=TRUE)
sPDF <- joinCountryData2Map(datamap, joinCode='NAME',
nameJoinColumn='Country.code')
sPDF <- sPDF[sPDF$ADMIN!='Antarctica',]
legVal <-  c(min(datamap[,-1]), max(datamap[,-1]) )
output$TheMap <- renderLeaflet({
mapselect <- input$var
pal <- colorBin("YlOrRd", domain = as.numeric(sPDF[[mapselect]]))
labels <- sprintf(
"<strong>%s</strong><br/>Number of events: %g</sup>",
sPDF$NAME, sPDF[[mapselect]]
) %>% lapply(htmltools::HTML)
TheMap<- leaflet(data = sPDF) %>% addTiles() %>% addPolygons(stroke = FALSE) %>% addPolygons(
fillColor = ~pal(as.numeric(sPDF[[mapselect]])),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))%>% addLegend("bottomleft", pal = pal, value = legVal)
}
)
})
shinyApp(ui = ui, server = server)
?hc_plotOptions
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
#devtools::install_github("jbkunst/highcharter")
library(highcharter)
library(htmlwidgets)
library(shiny)
library(data.table)
# selectPointsByDrag
s1 <- JS("/**
* Custom selection handler that selects points and cancels the default zoom behaviour
*/
function selectPointsByDrag(e) {
var xArr = []
// Select points
Highcharts.each(this.series, function (series) {
Highcharts.each(series.points, function (point) {
if (point.x >= e.xAxis[0].min && point.x <= e.xAxis[0].max &&
point.y >= e.yAxis[0].min && point.y <= e.yAxis[0].max) {
xArr.push(point.x);
point.select(true, true);
}
});
});
Shiny.onInputChange('R_xArr', xArr);
// Fire a custom event
Highcharts.fireEvent(this, 'selectedpoints', { points: this.getSelectedPoints() });
return false; // Don't zoom
}")
# unselectByClick
s2 <- JS("/**
* On click, unselect all points
*/
function unselectByClick() {
var points = this.getSelectedPoints();
if (points.length > 0) {
Highcharts.each(points, function (point) {
point.select(false);
});
}
}")
shinyApp(
ui = fluidPage(
highchartOutput("plot_hc"),
tableOutput("view")
),
server = function(input, output) {
df <- data.frame(x = 1:50, y = 1:50, otherInfo = letters[11:15])
output$plot_hc <- renderHighchart({
highchart() %>%
hc_chart(zoomType = 'xy', events = list(selection = s1, click = s2)) %>%
hc_add_series(df, "scatter") %>%
hc_add_event_point(event = "unselect")
})
selected.points <- reactiveValues(x = NULL, y = NULL)
output$view <- renderTable({
if (is.null(selected.points$x) || is.null(selected.points$y)) {
return(NULL)
} else {
data.table(x = selected.points$x, y = selected.points$y)
}
})
observeEvent(input$R_xArr, {
selected.points$x <- sort(unique(c(selected.points$x, input$R_xArr)))
selected.points$y <- df$y[df$x %in% selected.points$x]
})
observeEvent(input$plot_hc_unselect, {
selected.points$x <- NULL
selected.points$y <- NULL
})
}
)
?hc_add_series
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
?hc_add_series
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
library(shiny)
library(highcharter)
ui <- fluidPage(
column(3,
highchartOutput("hcontainer",height = "300px")
),
column(3,
textOutput("clicked")
)
)
server <- function(input, output){
click_js <- JS("function(event) {Shiny.onInputChange('pieclick',event.point.name);}")
output$hcontainer <- renderHighchart({
highchart() %>%
hc_chart(type = "pie") %>%
hc_add_series(data = list(
list(y = 3, name = "cat 1"),
list(y = 4, name = "dog 11"),
list(y = 6, name = "cow 55"))) %>%
hc_plotOptions(series = list(events = list(click = click_js)))
})
output$clicked <- renderText({
input$pieclick
})
}
shinyApp(ui, server)
library(shiny)
library(highcharter)
ui <- fluidPage(
column(3,
highchartOutput("hcontainer",height = "300px")
),
column(3,
textOutput("clicked")
)
)
server <- function(input, output){
click_js <- JS("function(event) {Shiny.onInputChange('pieclick',event.point.name);}")
output$hcontainer <- renderHighchart({
highchart() %>%
hc_chart(type = "pie") %>%
hc_add_series(data = list(
list(y = 3, name = "cat 1"),
list(y = 4, name = "dog 11"),
list(y = 6, name = "cow 55"))) %>%
hc_plotOptions(
series = list(
stacking = FALSE, allowPointSelect = TRUE ,events = list(click = click_js))
)
})
output$clicked <- renderText({
input$pieclick
})
}
shinyApp(ui, server)
library(shiny)
library(highcharter)
ui <- fluidPage(
column(3,
highchartOutput("hcontainer",height = "300px")
),
column(3,
textOutput("clicked")
)
)
server <- function(input, output){
click_js <- JS("function(event) {Shiny.onInputChange('pieclick',event.point.name);}")
output$hcontainer <- renderHighchart({
highchart() %>%
hc_chart(type = "pie") %>%
hc_add_series(data = list(
list(y = 3, name = "cat 1"),
list(y = 4, name = "dog 11"),
list(y = 6, name = "cow 55"))) %>%
hc_plotOptions(
series = list(
stacking = TRUE, allowPointSelect = TRUE ,events = list(click = click_js))
)
})
output$clicked <- renderText({
input$pieclick
})
}
shinyApp(ui, server)
library(shiny)
library(highcharter)
ui <- fluidPage(
column(3,
highchartOutput("hcontainer",height = "300px")
),
column(3,
textOutput("clicked")
)
)
server <- function(input, output){
click_js <- JS("function(event) {Shiny.onInputChange('pieclick',event.point.name);}")
output$hcontainer <- renderHighchart({
highchart() %>%
hc_chart(type = "pie") %>%
hc_add_series(data = list(
list(y = 3, name = "cat 1"),
list(y = 4, name = "dog 11"),
list(y = 6, name = "cow 55"))) %>%
hc_plotOptions(
series = list(
stacking = FALSE, allowPointSelect = TRUE, events = list(click = click_js), accumulate = TRUE)
)
})
output$clicked <- renderText({
input$pieclick
})
}
shinyApp(ui, server)
library(shiny)
library(highcharter)
ui <- fluidPage(
column(3,
highchartOutput("hcontainer",height = "300px")
),
column(3,
textOutput("clicked")
)
)
server <- function(input, output){
click_js <- JS("function(event) {Shiny.onInputChange('pieclick',event.point.name);}")
output$hcontainer <- renderHighchart({
highchart() %>%
hc_chart(type = "pie") %>%
hc_add_series(data = list(
list(y = 3, name = "cat 1"),
list(y = 4, name = "dog 11"),
list(y = 6, name = "cow 55"))) %>%
hc_plotOptions(
series = list(
stacking = FALSE, allowPointSelect = TRUE, events = list(click = click_js, accumulate = TRUE))
)
})
output$clicked <- renderText({
input$pieclick
})
}
shinyApp(ui, server)
library(shiny)
library(highcharter)
ui <- fluidPage(
column(3,
highchartOutput("hcontainer",height = "300px")
),
column(3,
textOutput("clicked")
)
)
server <- function(input, output){
click_js <- JS("function(event) {Shiny.setInputValue('pieclick',event.point.name);}")
output$hcontainer <- renderHighchart({
highchart() %>%
hc_chart(type = "pie") %>%
hc_add_series(data = list(
list(y = 3, name = "cat 1"),
list(y = 4, name = "dog 11"),
list(y = 6, name = "cow 55"))) %>%
hc_plotOptions(
series = list(
stacking = FALSE, allowPointSelect = TRUE, events = list(click = click_js, accumulate = TRUE))
)
})
output$clicked <- renderText({
input$pieclick
})
}
shinyApp(ui, server)
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
ui <- fluidPage(
tags$head(
tags$script(
"$(document).on('shiny:inputchanged', function(event) {
if (event.name != 'changed') {
Shiny.setInputValue('changed', event.name);
}
});"
)
),
numericInput("a_1", "a_1", 0),
textInput("a_2", "a_2"),
textInput("c", "c"),
textInput("d", "d"),
p("changedInputs:"), textOutput("changedInputs"), br(),
p("aFired:"), textOutput("aFired")
)
server <- function(input, output, session) {
output$changedInputs <- renderText({
paste("Outside observer: Latest input fired:", paste(input$changed, collapse = ", "))
})
myText <- reactiveVal()
observeEvent(eventExpr = {
lapply(grep(pattern = "^a_+[[:digit:]]$|^c$", x = isolate({names(input)}), value = TRUE), function(x){input[[x]]})
}, handlerExpr = {
req(input$changed)
if (input$changed == "a_1") {
myText("Inside observer: input$a_1 was fired")
} else  if (input$changed == "a_2") {
myText("Inside observer: input$a_2 was fired")
} else {
myText(paste("Inside observer:", input$changed, "was fired"))
}
}, ignoreInit = TRUE)
output$aFired <- renderText({myText()})
}
shinyApp(ui, server)
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
library(shiny)
runApp( list(ui = bootstrapPage(
verbatimTextOutput("results"),
tags$script('
$(document).on("keyup", function (e) {
Shiny.onInputChange("keypressed", e.which);
});
'),
p('This is a demo app')
)
, server = function(input, output, session) {
observeEvent(input$keypressed,
{
if(input$keypressed==27)
stopApp()
})
}
))
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
styler:::style_active_file()
runApp('~/Desktop/shs_app')
styler:::style_active_file()
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
styler:::style_active_file()
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
styler:::style_active_file()
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
styler:::style_active_file()
runApp('~/Desktop/shs_app')
runApp('~/Desktop/shs_app')
setwd("~/Desktop/shs_app")
shiny::runApp()
