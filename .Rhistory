n_ab == "positive" ~ round(as.numeric(difftime(pcr_timepoint_1, vacc_timepoint_1, units = "days")) / (365.25 / 12))
)
) %>%
mutate(months_since_pcr_pos = round(as.numeric(difftime(current_timepoint, pcr_timepoint_1, units = "days")) / (365.25 / 12)) + 1) %>%
mutate(
vacc_status = case_when(
vacc_count > 0 ~ "Vaccinated",
TRUE ~ "Not vaccinated"
),
quantile = case_when(
months_since_pcr_pos <= median(months_since_pcr_pos) ~ "0 to 5 Months Post-Infection",
TRUE ~ "More than 5 Months Post-Infection"
) %>%
as.factor(),
age_split = case_when(
age_group <= median(age_group, na.rm = TRUE) ~ "30 to 64 Years Old",
TRUE ~ "More than 64 Years Old"
) %>%
as.factor()
) %>%
as.data.frame()
payback_selection <- payback %>%
mutate(pcr_timepoint_1 = as.numeric(pcr_timepoint_1),
months_since_pcr_pos = as.numeric(months_since_pcr_pos),
sex = as.factor(sex),
vacc_status = as.factor(vacc_status)) %>%
select(
n_ab,
sex,
vacc_status,
months_since_pcr_pos,
age_group
)
# make this example reproducible
set.seed(1)
# Use 70% of dataset as training set and remaining 30% as testing set
sample <- sample(c(TRUE, FALSE), nrow(payback_selection), replace = TRUE, prob = c(0.7, 0.3))
train <- adults_selection[sample, ]
test <- adults_selection[!sample, ]
# fit logistic regression model
model <- glm(n_ab ~ ., family = "binomial", data = train)
# disable scientific notation for model summary
options(scipen = 999)
summary(model)
styler:::style_active_file()
anova(
model,
test = "Chisq"
)
# make this example reproducible
set.seed(1)
# Use 70% of dataset as training set and remaining 30% as testing set
sample <- sample(c(TRUE, FALSE), nrow(payback_selection), replace = TRUE, prob = c(0.7, 0.3))
train <- payback_selection[sample, ]
test <- payback_selection[!sample, ]
# fit logistic regression model
model <- glm(n_ab ~ ., family = "binomial", data = train)
# disable scientific notation for model summary
options(scipen = 999)
summary(model)
anova(
model,
test = "Chisq"
)
library(pscl)
pR2(model)
fitted.results <- predict(model,newdata=subset(test,select=c(2,3,4,5,6,7,8)),type='response')
fitted.results <- predict(
model,
newdata = test,
type = 'response')
fitted.results <- ifelse(fitted.results > 0.5, 1, 0)
misClasificError <- mean(fitted.results != test$n_ab)
styler:::style_active_file()
print(paste(
"Accuracy",
1 - misClasificError
))
misClasificError
fitted.results
mean(fitted.results != test$n_ab)
fitted.results
fitted.results
test$n_ab
as.numeric(test$n_ab)
ifelse(fitted.results > 0.5, 2, 1)
mean(fitted.results != as.numeric(test$n_ab))
fitted.results <- ifelse(fitted.results > 0.5, 2, 1)
misClasificError <- mean(fitted.results != as.numeric(test$n_ab))
print(paste(
"Accuracy",
1 - misClasificError
))
library(ROCR)
install.packages("ROCR")
styler:::style_active_file()
p <- predict(
model,
newdata = test,
type = "response"
)
prediction(
p,
test$n_ab
styler:::style_active_file()
styler:::style_active_file()
prediction(
p,
test$n_ab
)
predict(
p,
test$n_ab
)
p <- predict(
model,
newdata = test,
type = "response"
)
prediction(
p,
test$n_ab
)
??prediction
predict(
p,
test$n_ab
)
predict(
p,
as.numeric(test$n_ab)
)
install.packages("emmeans")
library(emmeans)
prediction(
p,
test$n_ab
)
install.packages("Amelia")
library(Amelia)
prediction(
p,
test$n_ab
)
library(ROCR)
prediction(
model,
newdata = test,
type = "response"
)
predict(
model,
newdata = test,
type = "response"
)
prediction(
p,
test$n_ab
)
p <- predict(
model,
newdata = test,
type = "response"
)
pr <- prediction(
p,
test$n_ab
)
styler:::style_active_file()
prf <- performance(
pr,
measure = "tpr",
x.measure = "fpr"
)
plot(prf)
styler:::style_active_file()
auc <- performance(
pr,
measure = "auc"
)
auc <- auc@y.values[[1]]
auc
anova(
model,
test = "Chisq"
)
payback_selection <- payback %>%
mutate(pcr_timepoint_1 = as.numeric(pcr_timepoint_1),
months_since_pcr_pos = as.numeric(months_since_pcr_pos),
sex = as.factor(sex),
vacc_status = as.factor(vacc_status)) %>%
select(
n_ab,
sex,
vacc_status,
months_since_pcr_pos,
age
)
# make this example reproducible
set.seed(1)
# Use 70% of dataset as training set and remaining 30% as testing set
sample <- sample(c(TRUE, FALSE), nrow(payback_selection), replace = TRUE, prob = c(0.7, 0.3))
train <- payback_selection[sample, ]
test <- payback_selection[!sample, ]
# fit logistic regression model
model <- glm(n_ab ~ ., family = "binomial", data = train)
# disable scientific notation for model summary
options(scipen = 999)
summary(model)
anova(
model,
test = "Chisq"
)
# make this example reproducible
set.seed(1)
# Use 70% of dataset as training set and remaining 30% as testing set
sample <- sample(c(TRUE, FALSE), nrow(adults_selection), replace = TRUE, prob = c(0.7, 0.3))
train <- adults_selection[sample, ]
test <- adults_selection[!sample, ]
# fit logistic regression model
model <- glm(n_ab ~ ., family = "binomial", data = train)
# disable scientific notation for model summary
options(scipen = 999)
summary(model)
anova(
model,
test = "Chisq"
)
adults_selection <- adults %>%
mutate(pcr_timepoint_1 = as.numeric(pcr_timepoint_1),
months_since_pcr_pos = as.numeric(months_since_pcr_pos),
sex = as.factor(sex),
vacc_status = as.factor(vacc_status)) %>%
select(
n_ab,
sex,
vacc_count,
months_since_pcr_pos,
age
)
# make this example reproducible
set.seed(1)
# Use 70% of dataset as training set and remaining 30% as testing set
sample <- sample(c(TRUE, FALSE), nrow(adults_selection), replace = TRUE, prob = c(0.7, 0.3))
train <- adults_selection[sample, ]
test <- adults_selection[!sample, ]
# fit logistic regression model
model <- glm(n_ab ~ ., family = "binomial", data = train)
# disable scientific notation for model summary
options(scipen = 999)
summary(model)
anova(
model,
test = "Chisq"
)
adults_selection <- adults %>%
mutate(pcr_timepoint_1 = as.numeric(pcr_timepoint_1),
months_since_pcr_pos = as.numeric(months_since_pcr_pos),
sex = as.factor(sex),
vacc_status = as.factor(vacc_status)) %>%
select(
n_ab,
sex,
vacc_count,
age
)
# make this example reproducible
set.seed(1)
# Use 70% of dataset as training set and remaining 30% as testing set
sample <- sample(c(TRUE, FALSE), nrow(adults_selection), replace = TRUE, prob = c(0.7, 0.3))
train <- adults_selection[sample, ]
test <- adults_selection[!sample, ]
# fit logistic regression model
model <- glm(n_ab ~ ., family = "binomial", data = train)
# disable scientific notation for model summary
options(scipen = 999)
summary(model)
adults_selection <- adults %>%
mutate(pcr_timepoint_1 = as.numeric(pcr_timepoint_1),
months_since_pcr_pos = as.numeric(months_since_pcr_pos),
sex = as.factor(sex),
vacc_status = as.factor(vacc_status)) %>%
select(
n_ab,
sex,
vacc_count,
age_group
)
# make this example reproducible
set.seed(1)
# Use 70% of dataset as training set and remaining 30% as testing set
sample <- sample(c(TRUE, FALSE), nrow(adults_selection), replace = TRUE, prob = c(0.7, 0.3))
train <- adults_selection[sample, ]
test <- adults_selection[!sample, ]
# fit logistic regression model
model <- glm(n_ab ~ ., family = "binomial", data = train)
# disable scientific notation for model summary
options(scipen = 999)
summary(model)
styler:::style_active_file()
adults_selection <- adults %>%
mutate(
pcr_timepoint_1 = as.numeric(pcr_timepoint_1),
months_since_pcr_pos = as.numeric(months_since_pcr_pos),
sex = as.factor(sex),
vacc_status = as.factor(vacc_status)
) %>%
select(
n_ab,
sex,
vacc_count,
months_since_pcr_pos,
age_group
)
# make this example reproducible
set.seed(1)
# Use 70% of dataset as training set and remaining 30% as testing set
sample <- sample(c(TRUE, FALSE), nrow(adults_selection), replace = TRUE, prob = c(0.7, 0.3))
train <- adults_selection[sample, ]
test <- adults_selection[!sample, ]
# fit logistic regression model
model <- glm(n_ab ~ ., family = "binomial", data = train)
# disable scientific notation for model summary
options(scipen = 999)
summary(model)
anova(
model,
test = "Chisq"
)
adults_selection <- adults %>%
mutate(
pcr_timepoint_1 = as.numeric(pcr_timepoint_1),
months_since_pcr_pos = as.numeric(months_since_pcr_pos),
sex = as.factor(sex),
vacc_status = as.factor(vacc_status)
) %>%
select(
n_ab,
sex,
vacc_status,
months_since_pcr_pos,
age_group
)
# make this example reproducible
set.seed(1)
# Use 70% of dataset as training set and remaining 30% as testing set
sample <- sample(c(TRUE, FALSE), nrow(adults_selection), replace = TRUE, prob = c(0.7, 0.3))
train <- adults_selection[sample, ]
test <- adults_selection[!sample, ]
# fit logistic regression model
model <- glm(n_ab ~ ., family = "binomial", data = train)
# disable scientific notation for model summary
options(scipen = 999)
summary(model)
anova(
model,
test = "Chisq"
)
payback_selection <- payback %>%
mutate(
pcr_timepoint_1 = as.numeric(pcr_timepoint_1),
months_since_pcr_pos = as.numeric(months_since_pcr_pos),
sex = as.factor(sex),
vacc_status = as.factor(vacc_status)
) %>%
select(
n_ab,
sex,
vacc_count,
months_since_pcr_pos,
age
)
# make this example reproducible
set.seed(1)
# Use 70% of dataset as training set and remaining 30% as testing set
sample <- sample(c(TRUE, FALSE), nrow(adults_selection), replace = TRUE, prob = c(0.7, 0.3))
train <- adults_selection[sample, ]
test <- adults_selection[!sample, ]
# fit logistic regression model
model <- glm(n_ab ~ ., family = "binomial", data = train)
# disable scientific notation for model summary
options(scipen = 999)
summary(model)
# make this example reproducible
set.seed(1)
# Use 70% of dataset as training set and remaining 30% as testing set
sample <- sample(c(TRUE, FALSE), nrow(payback_selection), replace = TRUE, prob = c(0.7, 0.3))
train <- payback_selection[sample, ]
test <- payback_selection[!sample, ]
# fit logistic regression model
model <- glm(n_ab ~ ., family = "binomial", data = train)
# disable scientific notation for model summary
options(scipen = 999)
summary(model)
anova(
model,
test = "Chisq"
)
model <- glm(n_ab ~ ., family = "binomial", data = payback_selection)
summary(model)
anova(
model,
test = "Chisq"
)
payback_selection <- payback %>%
mutate(
pcr_timepoint_1 = as.numeric(pcr_timepoint_1),
months_since_pcr_pos = as.numeric(months_since_pcr_pos),
sex = as.factor(sex),
vacc_status = as.factor(vacc_status)
) %>%
select(
n_ab,
sex,
vacc_status,
months_since_pcr_pos,
age
)
model <- glm(n_ab ~ ., family = "binomial", data = payback_selection)
summary(model)
anova(
model,
test = "Chisq"
)
confint(model)
install.packages("aod")
library(eod)
library(aod)
?wald.test
wald.test(b = coef(model), Sigma = vcov(model))
vcov(model)
coef(model)
wald.test(b = coef(model), Sigma = vcov(model), Terms = 2:3)
wald.test(b = coef(model), Sigma = vcov(model), Terms = 1:2)
wald.test(b = coef(model), Sigma = vcov(model), Terms = 3:4)
wald.test(b = coef(model), Sigma = vcov(model), Terms = c("Not vaccinated", "Vaccinated"))
wald.test(b = coef(model), Sigma = vcov(model), Terms = c("Not Vaccinated", "Vaccinated"))
wald.test(b = coef(model), Sigma = vcov(model), Terms = 1)
vcov(model)
wald.test(b = coef(model), Sigma = vcov(model), Terms = 3)
wald.test(b = coef(model), Sigma = vcov(model), Terms = 6)
wald.test(b = coef(model), Sigma = vcov(model), Terms = 5)
wald.test(b = coef(model), Sigma = vcov(model), Terms = 4)
wald.test(b = coef(model), Sigma = vcov(model), Terms = 3)
wald.test(b = coef(model), Sigma = vcov(model), Terms = 2)
adult$selection$vacc_status <- factor(adult$selection$vacc_status)
adult_selection$vacc_status <- factor(adult_selection$vacc_status)
adults_selection$vacc_status <- factor(adults_selection$vacc_status)
model <- glm(n_ab ~ ., family = "binomial", data = adults_selection)
summary(model)
confint(model)
Sigma = vcov(model)
vcov(model)
adults_selection$vacc_status
vcov(model)
vcov(model)
adults_selection$sex <- factor(adults_selection$sex)
# fit logistic regression model
model <- glm(n_ab ~ ., family = "binomial", data = adults_selection)
summary(model)
library(aod)
confint(model)
wald.test(b = coef(model), Sigma = vcov(model), Terms = 2)
vcov(model)
wald.test(b = coef(model), Sigma = vcov(model), Terms = 3)
adults_selection$age_group <- factor(adults_selection$age_group)
# fit logistic regression model
model <- glm(n_ab ~ ., family = "binomial", data = adults_selection)
summary(model)
confint(model)
wald.test(b = coef(model), Sigma = vcov(model), Terms = 3)
wald.test(b = coef(model), Sigma = vcov(model), Terms = 4:10)
wald.test(b = coef(model), Sigma = vcov(model))
wald.test(b = coef(model), Sigma = vcov(model), L %*% b)
wald.test(b = coef(model), Sigma = vcov(model), Terms = 2:10)
wald.test(b = coef(model), Sigma = vcov(model), Terms = 2, 3)
wald.test(b = coef(model), Sigma = vcov(model), Terms = c(2, 3))
wald.test(b = coef(model), Sigma = vcov(model), Terms = c(2:3))
wald.test(b = coef(model), Sigma = vcov(model), Terms = c(2:3, 3:4))
## odds ratios only
exp(coef(model))
## odds ratios and 95% CI
exp(cbind(OR = coef(model), confint(model)))
summary(model)
adults_selection <- adults %>%
mutate(
pcr_timepoint_1 = as.numeric(pcr_timepoint_1),
months_since_pcr_pos = as.numeric(months_since_pcr_pos),
sex = as.factor(sex),
vacc_status = as.factor(vacc_status)
) %>%
select(
n_ab,
sex,
vacc_status,
months_since_pcr_pos,
age_group
)
# fit logistic regression model
model <- glm(n_ab ~ ., family = "binomial", data = adults_selection)
summary(model)
confint(model)
## odds ratios only
exp(coef(model))
## odds ratios and 95% CI
exp(cbind(OR = coef(model), confint(model)))
with(model, null.deviance - deviance)
with(model, df.null - df.residual)
with(model, pchisq(null.deviance - deviance, df.null - df.residual, lower.tail = FALSE))
optios(scipen)
options(scipen = TRUE)
with(model, pchisq(null.deviance - deviance, df.null - df.residual, lower.tail = FALSE))
